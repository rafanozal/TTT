curve(hw.0(x),0.001,1,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.001,10,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2,.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,10,xlab='t',ylab='h(t)',col=2,lwd=2)
#1.3 Prueba este caso: param<-c(3,2,0.5)
param<-c(3,.25,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,10,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(3,.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,10,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,10,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,10,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,4,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,2,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1.5,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1.5,ylim=c(0,8),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1.5,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2,.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.0,1.5,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2.5,.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.0,1.5,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(3,.25,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.0,1.5,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(3,.25,.25)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.0,1.5,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1.2,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1.2,ylim=c(0.4,10),xlab='t',ylab='h(t)',col=2,lwd=2)
h<-function(t)
{return(1/(1-t))}
curve(h)
h<-function(t)
{return(1/(4-t))}
curve(h(x),2,4)
h<-function(t)
{return((1/(4-t))*(t>2))}
curve(h(x),0,4)
h<-function(t)
{return((1/(10-t))*(t>5))}
curve(h(x),0,10)
curve(h(x),4,6)
curve(h(x),9.999,10)
gammaMLE
library(STAR)
gammaMLE
library(survival)
data<-rgamma(100,5,1/5)
fit<-survreg(Surv(data)~1,dist='exponential')
fit
Surv(data)
help(dgamma)
help("survfit")
help("survreg")
survreg.distributions$rayleigh
survreg.distributions$loglogistic
help('rweibull')
help('rexp')
extremevalue
??extremevalue
h.norm<-function(x)
{
return(dnorm(x,mean=10,sd=1)/(1-pnorm(x,mean=10,sd=1)))
}
curve(h.norm(x),-1,20)
h.norm<-function(x)
{
return(dnorm(x,mean=0,sd=1)/(1-pnorm(x,mean=0,sd=1)))
}
curve(h.norm(x),-2,2)
h.norm<-function(x)
{
return(dnorm(x,mean=10,sd=1)/(1-pnorm(x,mean=10,sd=1)))
}
curve(h.norm(x),0,20)
abline(0,1)
help(dlogis)
help(dllogis)
library(STAR)
help(dllogis)
dweibull
help(dweibull)
?gamma
?laplace
??laplace
?dlogis
f<-function(x)exp(-x)/(1+exp(-x))
curve(f)
hlnorm<-function(x)
{return(dlnorm(x,0,1)/(1-plnorm(x,0,1)))}
curve(hlnorm)
curve(hlnorm(x),0,10)
curve(hlnorm(x),0,100,110)
curve(hlnorm(x),100,110)
curve(hlnorm(x),100,150)
ball_bearing<-c(17.88,
28.92,
33,
41.52,
42.12,
45.60,
48.40,
51.84,
51.96,
54.12,
55.56,
67.8,
68.64,
68.64,
68.88,
84.12,
93.12,
98.64,
105.12,
105.84,
127.92,
128.04,
173.40)
hist(ball_bearing)
install.packages("spreda")
install.packages("SPREDA")
(30^2*2))^.5
(30^2*2))^.5
(30^2*2)^.5
(30^2*2)^.5-30
y<-(30^2*2)^.5-30
sqrt(2)*30
l<-y/sqrt(2)
l
y<-sqrt(2)*10
y
y-10
(y-10)/2
42.43-30
help(Gompertz)
help(extremevalue)
library(survreg)
library(survival)
help("survreg")
help(extreme)
help(Extreme value)
help(Extremevalue)
help("Weibull")
help(rlogis)
help(dllogis)
library(STAR)
help(dllogis)
K<-1:5
Ns<-c(50,100,500,1000)
param<-expand.grid(K,Ns)
param
setwd("C:/Users/User/Dropbox/TTT final/resultados_tablas")
tipoI1000<-read.table('TypeI_error_N_1000.txt',h=T)
head(tipoI1000)
which.max(tipoI1000[,3])
tipoI1000[79,]
summary(tipoI1000[,2:3])
which.max(tipoI1000[,2])
nrow(tipoI1000)
ss<-416
set.seed(ss)
myData<-rexp(1000)
library(AdequacyModel)
TTT(myData)
library(exptest)
co.exp.test(myData)
cvm.exp.test(myData)
hollander.exp.test(myData)
ks.exp.test(myData)
quantile(tipoI1000[,2],probs=seq(0.9,0.99,by=0.01))
boxplot(tipoI1000[,2])
tipoI1000[416,]
summary(tipoI1000[-416,2:3])
quantile(tipoI1000[-416,2],probs=seq(0.9,0.99,by=0.01))
summary(tipoI1000[-c(79,416),2:3])
setwd("C:/Users/User/Desktop/grid/error1")
K<-1:5;
Ns<-c(50,100,500,1000)
param<-expand.grid(K,models)
#
# #
M<-200
error50<-matrix(NA,1,3)
for (num in 1:5)
{
tarea<-param[num,1]
N<-param[num,2]
fil.res<-paste('Error_TypeI_N_',N,'_tarea_',tarea,'.txt',sep="")
res<-as.matrix(read.table(fil.res,h=T),M,3)
error50<-rbind(powerH1,res)
}
colnames(error50)<-c( "i" ,"SiZer-0","SiZer-2")
error50<-error50[-1,]
M<-200
error50<-matrix(NA,1,3)
for (num in 1:5)
{
tarea<-param[num,1]
N<-param[num,2]
fil.res<-paste('Error_TypeI_N_',N,'_tarea_',tarea,'.txt',sep="")
res<-as.matrix(read.table(fil.res,h=T),M,3)
error50<-rbind(error50,res)
}
colnames(error50)<-c( "i" ,"SiZer-0","SiZer-2")
error50<-error50[-1,]
head(error50)
summary(error50[,2:3])
sapply(2:3,boxplot(error50[,i]))
sapply(2:3,function(i)boxplot(error50[,i]))
boxplot(error50[,2])
boxplot(error50[,3])
N<-500
tarea<-1
param
fil.res<-paste('Error_TypeI_N_',N,'_tarea_',tarea,'.txt',sep="")
res<-as.matrix(read.table(fil.res,h=T),M,3)
head(res)
head(res,n=30)
nrow(res)
nrow(error50)
error100<-matrix(NA,1,3)
for (num in 6:10)
{
tarea<-param[num,1]
N<-param[num,2]
fil.res<-paste('Error_TypeI_N_',N,'_tarea_',tarea,'.txt',sep="")
res<-as.matrix(read.table(fil.res,h=T),M,3)
error100<-rbind(error100,res)
}
colnames(error100)<-c( "i" ,"SiZer-0","SiZer-2")
error100<-error100[-1,]
summary(error100)
ss<-416
N
N<-1000
setwd("C:/Users/User/Dropbox/TTT final/paraGrid")
source('colors_grid.R')
summaryColors
source("tools.R",    encoding="utf-8")
source('test_ttt.R', encoding="utf-8")
tarea<-3
i
i<-416
ss<-i;set.seed(ss)
myData<-rexp(N)
if(N==50){xgrid=21; hMin=0.1; hMax=1}
if(N==100){xgrid=51; hMin=0; hMax=1}
if(N==500){xgrid=401; hMin=0; hMax=1}
if(N==1000){xgrid=401; hMin=0;hMax=0.9}
res.myData<-test.ttt(myData=myData,xgrid=xgrid,bootstrapSample = 500,hMin=hMin,hMax=hMax)
summaryColors(res.myData)
summaryColors <- function(sizerData){
# Find the total of pixel for that map
# totalPs = unique(sizerData$p0)
# totalHs = unique(sizerData$h)
totalPixels = nrow(sizerData)
# Create the dataframe for each color and each percentage.
# There are 4 colors in each of the three maps
colorsZero   = c("yellow", "olivedrab", "camel",  "grey")
colorsFirst  = c("red",    "blue",      "purple", "grey")
colorsSecond = c("orange", "cyan",      "green",  "grey")
totalColors  = c(colorsZero, colorsFirst, colorsSecond)
mySummary = expand.grid(color = totalColors, percentage = 0)
# Calculate the percentage of each color
# -- Zero SiZer
totalPixelsZero<-totalPixels#-sum(sizerData$ColorCodeZero == "grey")
percentageGreen  = sum(sizerData$ColorCodeZero == "yellow")/totalPixelsZero
percentageLemon  = sum(sizerData$ColorCodeZero == "olivedrab")/totalPixelsZero
percentageBrown  = sum(sizerData$ColorCodeZero == "camel")/totalPixelsZero
# percentageGrey0  = sum(sizerData$ColorCodeZero == "grey")/totalPixels
# -- First SiZer
totalPixelsFirst<-totalPixels#-sum(sizerData$ColorCodeFirst == "grey")
percentageRed    = sum(sizerData$ColorCodeFirst == "red")/totalPixelsFirst
percentageBlue   = sum(sizerData$ColorCodeFirst == "blue")/totalPixelsFirst
percentagePurple = sum(sizerData$ColorCodeFirst == "purple")/totalPixelsFirst
#  percentageGrey1  = sum(sizerData$ColorCodeFirst == "grey")/totalPixels
# -- Second SiZer
totalPixelsSecond<-totalPixels#-sum(sizerData$ColorCodeSecond == "grey")
percentageOrange = sum(sizerData$ColorCodeSecond == "orange")/totalPixelsSecond
percentageCyan   = sum(sizerData$ColorCodeSecond == "cyan")/totalPixelsSecond
percentageVerde  = sum(sizerData$ColorCodeSecond == "green")/totalPixelsSecond
# percentageGrey2  = sum(sizerData$ColorCodeSecond == "grey")/totalPixels
# Write it into the dataframe and return it
mySummary[1,2]  = percentageGreen
mySummary[2,2]  = percentageLemon
mySummary[3,2]  = percentageBrown
mySummary[4,2]  = NA #percentageGrey0
mySummary[5,2]  = percentageRed
mySummary[6,2]  = percentageBlue
mySummary[7,2]  = percentagePurple
mySummary[8,2]  = NA #percentageGrey1
mySummary[9,2]  = percentageOrange
mySummary[10,2] = percentageCyan
mySummary[11,2] = percentageVerde
mySummary[12,2] = NA #percentageGrey2
return(mySummary)
}
summaryColors(res.myData)
sizerData<-res.myData
totalPixels = nrow(sizerData)
colorsZero   = c("yellow", "olivedrab", "camel",  "grey")
colorsFirst  = c("red",    "blue",      "purple", "grey")
colorsSecond = c("orange", "cyan",      "green",  "grey")
totalColors  = c(colorsZero, colorsFirst, colorsSecond)
mySummary = expand.grid(color = totalColors, percentage = 0)
totalPixelsZero<-totalPixels#-sum(sizerData$ColorCodeZero == "grey")
totalPixels
401*11
percentageGrey0  = sum(sizerData$ColorCodeZero == "grey")/totalPixels
mySummary = expand.grid(color = totalColors, percentage = 0)
# Calculate the percentage of each color
# -- Zero SiZer
totalPixelsZero<-totalPixels#-sum(sizerData$ColorCodeZero == "grey")
percentageGreen  = sum(sizerData$ColorCodeZero == "yellow")/totalPixelsZero
percentageLemon  = sum(sizerData$ColorCodeZero == "olivedrab")/totalPixelsZero
percentageBrown  = sum(sizerData$ColorCodeZero == "camel")/totalPixelsZero
percentageGrey0  = sum(sizerData$ColorCodeZero == "grey")/totalPixels
# -- First SiZer
totalPixelsFirst<-totalPixels#-sum(sizerData$ColorCodeFirst == "grey")
percentageRed    = sum(sizerData$ColorCodeFirst == "red")/totalPixelsFirst
percentageBlue   = sum(sizerData$ColorCodeFirst == "blue")/totalPixelsFirst
percentagePurple = sum(sizerData$ColorCodeFirst == "purple")/totalPixelsFirst
percentageGrey1  = sum(sizerData$ColorCodeFirst == "grey")/totalPixels
# -- Second SiZer
totalPixelsSecond<-totalPixels#-sum(sizerData$ColorCodeSecond == "grey")
percentageOrange = sum(sizerData$ColorCodeSecond == "orange")/totalPixelsSecond
percentageCyan   = sum(sizerData$ColorCodeSecond == "cyan")/totalPixelsSecond
percentageVerde  = sum(sizerData$ColorCodeSecond == "green")/totalPixelsSecond
percentageGrey2  = sum(sizerData$ColorCodeSecond == "grey")/totalPixels
# Write it into the dataframe and return it
mySummary[1,2]  = percentageGreen
mySummary[2,2]  = percentageLemon
mySummary[3,2]  = percentageBrown
mySummary[4,2]  = percentageGrey0
mySummary[5,2]  = percentageRed
mySummary[6,2]  = percentageBlue
mySummary[7,2]  = percentagePurple
mySummary[8,2]  = percentageGrey1
mySummary[9,2]  = percentageOrange
mySummary[10,2] = percentageCyan
mySummary[11,2] = percentageVerde
mySummary[12,2] = percentageGrey2
mySummary
i
N
ls()
tipoI1000
tipoI1000[416,]
mySummary
TTT(myData)
setwd("C:/Users/User/Dropbox/TTT final")
source(ttt.r)
source('ttt.r')
res.myData2<-ttt(myData,xgrid=401,hMin=0,hMax=0.9,bootstrapSample = 500)
N<-100
myData<-rexp(N)
res.myData100<-ttt(myData,xgrid=401,hMin=0,hMax=0.9,bootstrapSample = 500)
res.myData100<-ttt(myData,xgrid=401,hMin=0,hMax=0.9,bootstrapSample = 500,blackAndWhite = TRUE)
N<-1000
myData<-rexp(N)
res.myData1000<-ttt(myData,xgrid=401,hMin=0,hMax=0.9,bootstrapSample = 500,blackAndWhite = TRUE)
summaryColors(res.myData1000)
N
i
ss<-i;set.seed(ss);myData<-rexp(1000)
res.myData1000<-ttt(myData,xgrid=401,hMin=0,hMax=0.9,bootstrapSample = 500,blackAndWhite = TRUE)
summaryColors(res.myData1000)
setwd("C:/Users/User/Desktop/grid/error1")
tarea<-1;N<-500
fil.res<-paste('Error_TypeI_N_',N,'_tarea_',tarea,'.txt',sep="")
res<-as.matrix(read.table(fil.res,h=T),M,3)
error500<-matrix(NA,1,3)
error500<-rbind(error500,res)
error500<-error500[-1,]
error500
hollander.exp.test(myData)
kochar.exp.test(myData)
setwd("C:/Users/User/Desktop/grid/error1")
K<-1:5;
Ns<-c(50,100,500,1000)
param<-expand.grid(K,models)
#
# #
K<-1:5;
Ns<-c(50,100,500,1000)
param<-expand.grid(K,Ns)
#
# #
M<-200
error50<-matrix(NA,1,3)
for (num in 1:5)
{
tarea<-param[num,1]
N<-param[num,2]
fil.res<-paste('Error_TypeI_N_',N,'_tarea_',tarea,'.txt',sep="")
res<-as.matrix(read.table(fil.res,h=T),M,3)
error50<-rbind(error50,res)
}
colnames(error50)<-c( "i" ,"SiZer-0","SiZer-2")
error50<-error50[-1,]
#####
error100<-matrix(NA,1,3)
for (num in 6:10)
{
tarea<-param[num,1]
N<-param[num,2]
fil.res<-paste('Error_TypeI_N_',N,'_tarea_',tarea,'.txt',sep="")
res<-as.matrix(read.table(fil.res,h=T),M,3)
error100<-rbind(error100,res)
}
colnames(error100)<-c( "i" ,"SiZer-0","SiZer-2")
error100<-error100[-1,]
summary(error50)
which.max(error50[,3])
ss<-977;set.seed(ss);myData<-rexp(50)
TTT(myData)
cvm.exp.test(myData)
ks.exp.test(myData)
shapiro.exp.test(myData)
co.exp.test(myData)
hollander.exp.test(myData)
setwd("C:/Users/User/Dropbox/TTT final")
source('ttt.r')
source('tools.r')
ss
res977<-ttt(myData,xgrid=21,hMin=0,bootstrapSample = 500)
res977<-ttt(myData,xgrid=21,hMin=0,bootstrapSample = 500)
res977<-ttt(myData,xgrid=21,hMin=0,bootstrapSample = 500,blackAndWhite = TRUE)
mydata<-rgamma(100,1/5,5)
mydata<-rgamma(100,5,1/5)
TTT(mydata)
mydata<-read.table('SORT_brakes.txt',h=T)
setwd("C:/Users/User/Dropbox/TTT final")
mydata<-read.table('SORT_brakes.txt',h=T)
mydata<-read.table('SORT_brakes.txt',h=T)[,1]
resbrakes<-ttt(mydata,xgrid=51,bootstrapSample = 500)#,blackAndWhite = TRUE)
summaryColors(resbrakes)
source('pvalue_def.r')
setwd("C:/Users/User/Dropbox/TTT final")
source('pvalue_def.r')
setwd("C:/Users/User/Dropbox/TTT final")
source('pvalue_def.r')
setwd("C:/Users/User/Dropbox/TTT final")
source('pvalue_def.r')
source('pvalue_def.r')
source('pvalue_def.r')
summaryColors <- function(sizerData){
# Find the total of pixel for that map
# totalPs = unique(sizerData$p0)
# totalHs = unique(sizerData$h)
totalPixels = nrow(sizerData)
# Create the dataframe for each color and each percentage.
# There are 4 colors in each of the three maps
colorsZero   = c("yellow", "olivedrab", "camel",  "grey")
colorsFirst  = c("red",    "blue",      "purple", "grey")
colorsSecond = c("orange", "cyan",      "green",  "grey")
totalColors  = c(colorsZero, colorsFirst, colorsSecond)
mySummary = expand.grid(color = totalColors, percentage = 0)
# Calculate the percentage of each color
# -- Zero SiZer
# totalPixelsZero<-totalPixels-sum(sizerData$ColorCodeZero == "grey")
percentageGreen  = sum(sizerData$ColorCodeZero == "yellow")/totalPixels
percentageLemon  = sum(sizerData$ColorCodeZero == "olivedrab")/totalPixels
percentageBrown  = sum(sizerData$ColorCodeZero == "camel")/totalPixels
percentageGrey0  = sum(sizerData$ColorCodeZero == "grey")/totalPixels
# -- First SiZer
#  totalPixelsFirst<-totalPixels-sum(sizerData$ColorCodeFirst == "grey")
percentageRed    = sum(sizerData$ColorCodeFirst == "red")/totalPixels
percentageBlue   = sum(sizerData$ColorCodeFirst == "blue")/totalPixels
percentagePurple = sum(sizerData$ColorCodeFirst == "purple")/totalPixels
percentageGrey1  = sum(sizerData$ColorCodeFirst == "grey")/totalPixels
# -- Second SiZer
#  totalPixelsSecond<-totalPixels-sum(sizerData$ColorCodeSecond == "grey")
percentageOrange = sum(sizerData$ColorCodeSecond == "orange")/totalPixels
percentageCyan   = sum(sizerData$ColorCodeSecond == "cyan")/totalPixels
percentageVerde  = sum(sizerData$ColorCodeSecond == "green")/totalPixels
percentageGrey2  = sum(sizerData$ColorCodeSecond == "grey")/totalPixels
# Write it into the dataframe and return it
mySummary[1,2]  = percentageGreen
mySummary[2,2]  = percentageLemon
mySummary[3,2]  = percentageBrown
mySummary[4,2]  = percentageGrey0
mySummary[5,2]  = percentageRed
mySummary[6,2]  = percentageBlue
mySummary[7,2]  = percentagePurple
mySummary[8,2]  = percentageGrey1
mySummary[9,2]  = percentageOrange
mySummary[10,2] = percentageCyan
mySummary[11,2] = percentageVerde
mySummary[12,2] = percentageGrey2
return(mySummary)
}
summaryColors(resbrakes)
resbrakes<-ttt(mydata,xgrid=51,bootstrapSample = 500)#,blackAndWhite = TRUE)
mydata<-read.table('SORT_brakes.txt',h=T)[,1]
resbrakes<-ttt(mydata,xgrid=51,bootstrapSample = 500)#,blackAndWhite = TRUE)
summaryColors(resbrakes)
length(mydata)
setwd("C:/Users/User/Dropbox/TTT final/basura")
boot<-read.table('SiZer0_pval_boot_Vboot500_N107.txt',h=T)
head(boot)
sum(boot[,2]>0.67557)
boot[,2]
sum(boot[,2]>0.675)
sum(boot[,3]>0.675)

t1<-rweibull(1,shape=a,scale=sc)
t2<-rweibull(1,shape=b,scale=sc)
t3<-rweibull(1,shape=c,scale=sc)
t[i]<-min(t1,t2,t3)
}
return(t)
}
param<-c(3,2,0.5)
rbt.0<-function(n){return(r.bt(n,param=param))}
times<-rbt.0(100)
mean(times)
TTT(times)
r.bt<-function(n,param)
{
sc<-2.5;a<-param[1];b<-param[2];c<-param[3]
t<-double(n)
for(i in 1:n)
{
t1<-rweibull(1,shape=a,scale=sc)
t2<-rweibull(1,shape=b,scale=sc)
t3<-rweibull(1,shape=c,scale=sc)
t[i]<-min(t1,t2,t3)
}
return(t)
}
param<-c(3,2,0.5)
rbt.0<-function(n){return(r.bt(n,param=param))}
times<-rbt.0(100)
mean(times)
TTT(times)
library(AdequacyModel)
sigma<-1;mu<--(sigma)^2/2
t<-rlnorm(100,meanlog=mu,sdlog=sigma)
mean(t)
TTT(t)
h.ln<-function(x)
{return(dlnorm(x,meanlog=mu,sdlog=sigma)/(1-plnorm(x,meanlog=mu,sdlog=sigma)))}
qlnorm(0.999,meanlog=mu,sdlog=sigma)
curve(h.ln(x),0,12)
library(AdequacyModel)
sigma<-1;mu<--(sigma)^2/2
t<-rlnorm(100,meanlog=mu,sdlog=sigma)
mean(t)
par(mfrow=c(1,2))
TTT(t)
h.ln<-function(x)
{return(dlnorm(x,meanlog=mu,sdlog=sigma)/(1-plnorm(x,meanlog=mu,sdlog=sigma)))}
qlnorm(0.999,meanlog=mu,sdlog=sigma)
curve(h.ln(x),0,12)
###bathtub
r.bt<-function(n,param)
{
sc<-2.5;a<-param[1];b<-param[2];c<-param[3]
t<-double(n)
for(i in 1:n)
{
t1<-rweibull(1,shape=a,scale=sc)
t2<-rweibull(1,shape=b,scale=sc)
t3<-rweibull(1,shape=c,scale=sc)
t[i]<-min(t1,t2,t3)
}
return(t)
}
param<-c(3,2,0.5)
rbt.0<-function(n){return(r.bt(n,param=param))}
times<-rbt.0(100)
mean(times)
def.off()
TTT(times)
sigma<-1;mu<--(sigma)^2/2
t<-rlnorm(100,meanlog=mu,sdlog=sigma)
mean(t)
par(mfrow=c(1,2))
TTT(t)
h.ln<-function(x)
{return(dlnorm(x,meanlog=mu,sdlog=sigma)/(1-plnorm(x,meanlog=mu,sdlog=sigma)))}
qlnorm(0.999,meanlog=mu,sdlog=sigma)
curve(h.ln(x),0,12)
###bathtub
r.bt<-function(n,param)
{
sc<-2.5;a<-param[1];b<-param[2];c<-param[3]
t<-double(n)
for(i in 1:n)
{
t1<-rweibull(1,shape=a,scale=sc)
t2<-rweibull(1,shape=b,scale=sc)
t3<-rweibull(1,shape=c,scale=sc)
t[i]<-min(t1,t2,t3)
}
return(t)
}
param<-c(3,2,0.5)
rbt.0<-function(n){return(r.bt(n,param=param))}
times<-rbt.0(100)
mean(times)
TTT(times)
library(latex2exp)
help("latex2exp")
libray(exptest)
install.packages("exptest")
library(exptest)
gnedenko.exp.test(rexp(100))
gnedenko.exp.test(rweibull(100,2))
library(AdequacyModel)
dat<-rexp(100)
TTT(dat)
gnedenko.exp.test
gnedenko.exp.test(dat)
dat<-rweibull(100,2)
gnedenko.exp.test(dat)
TTT(dat)
granulocytic<-c(7,
47,
58,
74,
177,
232,
273,
285,
317,
429,
440,
445,
455,
468,
495,
497,
532,
571,
579,
581,
650,
702,
715,
779,
881,
900,
930,
968,
1077,
1109,
1314,
1334,
1367,
1534,
1712,
1784,
1877,
1886,
2045,
2056,
2260,
2429,
2509)
gndenko.exp.test(granulocytic)
gnedenko.exp.test(granulocytic)
TTT(granulocytic)
shapiro.exp.test(granulocytic)
hollander.exp.test(granulocytic)
#1. Modelo Weibull aditivo (3 componentes)
#1.1. Función de azar
hw<-function(t,param){a<-param[1];b<-param[2];c<-param[3]
return(a*t^(a-1)+b*t^(b-1)+c*t^(c-1))}
#1.2. Generador aleatorio
r.w<-function(n,param)
{a<-param[1];b<-param[2];c<-param[3]
t1<-rweibull(n,shape=a,scale=1);t2<-rweibull(n,shape=b,scale=1);
t3<-rweibull(n,shape=c,scale=1)
t<-sapply(1:n,function(i){return(min(t1[i],t2[i],t3[i]))})
return(t)
}
#1.3 Prueba este caso: param<-c(3,2,0.5)
param<-c(3,2,0.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1.5,ylim=c(0,10))
#TTT
rw.0<-function(n){return(r.w(n,param))}
t<-rw.0(100)
mean(t); #alrededor de 0.4
library(AdequacyModel)
TTT(t)
help(aggregate)
help(gls)
library(car)
install.packages("car")
help(gls)
library(car)
help(gls)
library(nlme)
help("gls")
help("potcript")
help("poscript")
help("potscript")
saeqn<-function(s,l){
k1<-l$gp$alpha/(l$gp$beta-s)
k1-l$t
}
fhat<- function(t,s,gp){
k<-gp$alpha*(log(gp$beta)-log(gp$beta-s))
k2<-gp$alpha/(gp$beta-s)^2
fh<-(2*pi*k2)^(0.5)*exp(k-t*s)
fh
}
gp<-list(alpha=5.4,beta=2)     #parámetros Gamma
delta<-0.01                    #longitud del intervalo para la densidad
w<-seq(0.01,20,delta)#soporte de la densidad
###Código R para calcular las aproximaciones de saddlepoint para
###densidad, supervivencia y riesgo con las funciones saeqn y fhat.
##definir ecuación de saddlepoint
saeqn<-function(s,l){
k1<-l$gp$alpha/(l$gp$beta-s)
k1-l$t
}
fhat<- function(t,s,gp){
k<-gp$alpha*(log(gp$beta)-log(gp$beta-s))
k2<-gp$alpha/(gp$beta-s)^2
fh<-(2*pi*k2)^(0.5)*exp(k-t*s)
fh
}
gp<-list(alpha=5.4,beta=2)     #parámetros Gamma
delta<-0.01                    #longitud del intervalo para la densidad
w<-seq(0.01,20,delta)#soporte de la densidad
#s: saddlepoint
#fh: vector de valores densidad saddlepoint
#nsd: constante normalizadora
#Solucion numerica para el saddlepoint
s<-sapply(1:length(w),function(i){
uniroot(saeqn,lower=-1999, upper=1.999,l=list(t=w[i], gp=gp))$root
})
#calculode la aproximación densidad de saddlepoint
fh<-sapply(1:length(w), function(i){
fhat(w[i],s[i],gp)
})
#calculo de la constante normalizadora
nsd<-sum(fh[2:length(w)])*delta
nsd
#normaliza la aproximacion de la densidad saddlepoint
#calcula la aproximacion de la funcion de supervivencia saddlepoint
#calcula la aproximacion de la función de riesgo saddlepoint
fh<-fh/nsd
sasurv<-1-cumsum(fh)*delta
sahaz<-fh/sasurv
#calculo y gráfica de las funciones de densidad
eden<- dgamma(w,gp$alpha, rate=gp$beta)
postscript("density.ps", horizontal=F)
par(pty="s")
plot(w,eden,type="l",xlim=c(0,10), xlab="t",ylab="density")
lines(w,fh,lty=2,col="red")
graphics.off()
ls()
help("choose")
choose(4,2)
choose(2,2)
choose(3,2)
ok
R.k.n<-function(k,n,p)
{
R.k<-double(n-k+1)
for(i in 1:(n-k+1))
{
R.k[i]<-choose(n,i+(k-1))*p^(i+(k-1))*(1-p)^(n-(i+(k-1)))
}
return(sum(R.k))
}
R.k.n(2,3,0.8)
R.k<-double(n-k+1)
n<-3;k<-2;p<-0.8
R.k<-double(n-k+1)
R.k
i<-1
R.k[i]<-choose(n,i+(k-1))*p^(i+(k-1))*(1-p)^(n-(i+(k-1)))
for(i in 1:(n-k+1))
{
R.k[i]<-choose(n,i+(k-1))*p^(i+(k-1))*(1-p)^(n-(i+(k-1)))
}
R.k
1-0.2^2
1-0.2^3
i+(k-1)
n-(i+(k-1))
0,8^3
0.8^3
3*(1-0.2^2)
3*(0.8^2)*0.2
help(dgompertz)
install.packages("flexsurv")
library(flexsurv)
help(rgompertz)
rgompertz(100)
qgompertz(0.99)
qgompertz(0.99,shape=-1)
qgompertz(0.99,shape=-.1)
curve(hgompertz(x,shape=-1),0,10)
curve(hgompertz(x,shape=-1),0.2,10)
curve(hgompertz(x,shape=-1),2,10)
curve(hgompertz(x,shape=-1),8,10)
rgompertz(100,shape=-1)
rgompertz(100,shape=-.5)
rgompertz(100,shape=-.25)
sort(rgompertz(100,shape=-.25))
sort(rgompertz(100,shape=-.25))
sort(rgompertz(100,shape=-.25))
sort(rgompertz(100,shape=-.05))
sort(rgompertz(100,shape=-.05))
sort(rgompertz(10000,shape=-.05))
sort(rgompertz(10000,shape=-.05)[9990:10000])
sort(rgompertz(10000,shape=-.1)[9990:10000])
sort(rgompertz(10000,shape=-.2)[9990:10000])
sort(rgompertz(10000,shape=-.2))[9990:10000]
sort(rgompertz(10000,shape=-.1))[9990:10000]
sort(rgompertz(10000,shape=-.1))[9990:10000]
sort(rgompertz(10000,shape=-.1))[9990:10000]
sort(rgompertz(10000,shape=-.1))[9990:10000]
a<-matrix(1:4,2,2)
a%%a
b<-matrix(c(1,1,1,1),2,2)
a%%b
help(%%)
help("%%")
b<-b*2
b
a%%b
a
2%%6
2%/%6
5%/%6
8%/%6
8%%6
setwd("C:/Users/Usuario/Dropbox/TTT final/ficherosdelgrid")
tarea1<-read.table('Power_H1=1_tarea1_N_1000.txt',h=T)
tarea2<-read.table('Power_H1=1_tarea2_N_1000.txt',h=T)
tarea3<-read.table('Power_H1=1_tarea3_N_1000.txt',h=T)
tarea4<-read.table('Power_H1=1_tarea4_N_1000.txt',h=T)
tarea5<-read.table('Power_H1=1_tarea5_N_1000.txt',h=T)
head(tarea2)
head(tarea1)
head(tarea5)
K<-1;M<-200
ini<-(K-1)*M+1;fin<-ini+(M-1)
ini
fin
K<-2
ini<-(K-1)*M+1;fin<-ini+(M-1)
ini;fin
setwd("C:/Users/Usuario/Dropbox/TTT final/ficherosdelgrid")
tarea1<-read.table('Power_H1=1_tarea1_N_1000.txt',h=T)
summary(tarea1[,2])
quantile(tarea1[,2],0.95)
boxplot(tarea1[,2])
tarea2<-read.table('Power_H1=2_tarea1_N_1000.txt',h=T)
boxplot(tarea2[,2])
summary(tarea2[,2])
quantile(tarea2[,2],0.95)
tarea3<-read.table('Power_H1=3_tarea1_N_1000.txt',h=T)
quantile(tarea3[,2],0.95)
summary(tarea3[,2])
setwd("C:/Users/Usuario/Dropbox/TTT final/resultados_tablas")
alpha500<-read.table('TypeI_error_N_500.txt',h=T)
head(alpha500)
summary(alpha500[,2:3])
quantile(alpha500[,2:3],0.95)
quantile(alpha500[,2],0.95)
quantile(alpha500[,3],0.95)
nrow(alpha500)
setwd("C:/Users/Usuario/Dropbox/TTT final")
alpha1000<-read.table('TypeI_error_N_1000.txt',h=T)
summary(alpha1000[,2:3])
quantile(alpha1000[,2],0.95)
quantile(alpha1000[,3],0.95)
setwd("C:/Users/Usuario/Dropbox/TTT final/resultados_tablas")
setwd("C:/Users/Usuario/Dropbox/TTT final/resultados_tablas")
power500<-read.table('Power_H1=IFR_N500.txt',h=T)
summary(power500[,2])
quantile(power500[,2],0.95)
power100<-read.table('Power_H1=IFR_N100.txt',h=T)
quantile(power100[,2],0.95)
summary(power100[,2])
power100<-read.table('Power_H1=BFR_N100.txt',h=T)
summary(power100[,2])
quantile(power100[,2],0.95)
nrow(alpha1000)
setwd("C:/Users/Usuario/Dropbox/TTT final/paraGrid")
source('colors_grid.R')
source("tools.R",    encoding="utf-8")
source('test_ttt.R', encoding="utf-8")
N<-100;M<-1000
fil.res<-paste('Power_H1_',model,'_tarea',tarea,'_N_',N,'.txt',sep="")
#rm(list=ls())
source('colors_grid.R')
source("tools.R",    encoding="utf-8")
source('test_ttt.R', encoding="utf-8")
N<-100;M<-1000
model=3
fil.res<-paste('Power_H1_',model,'_N_',N,'.txt',sep="")
fil.res
###funcion para simular desde un modelo
if (model==1){simula<-function(N)return(rgamma(N,shape=5,scale=1/5))}
if (model==2){simula<-function(N)
{data<-double(N)
for(i in 1:N)
{data[i]<-min(c(rweibull(1,shape=3,scale=2.5),rweibull(1,shape=2,scale=2.5),rweibull(1,shape=.5,scale=2.5)))}
return(data)}
}
if (model==3){simula<-function(N){return(rlnorm(N,meanlog=-0.5,sdlog=1))}}
###1=IFR; 2=BFR;3=UFR
for(i in 1:M)
{
ss<-i;set.seed(ss)
myData<-simula(N)
if(N==100){xgrid=51}else{xgrid=401}
res.myData<-test.ttt(myData=myData,xgrid=xgrid,bootstrapSample = 250)
colors<-summaryColors(res.myData)
# no.typeII.0[i]<-sum(colors[3,2])  ##proportion of  not brown (gray) pixels in Sizer-0 #NO TIENE SENTIDO EN ERROR TYPE II
no.typeII.2<-sum(colors[9:10,2]) ##proportion of not green (gray) pixels in Sizer-2
res<-c(i,no.typeII.2)
if (i==ini){write(c('i','test.power'),file=fil.res,append=F,ncol=length(res))}
write(res,file=fil.res,append=T,ncol=length(res))
}
for(i in 1:M)
{
ss<-i;set.seed(ss)
myData<-simula(N)
if(N==100){xgrid=51}else{xgrid=401}
res.myData<-test.ttt(myData=myData,xgrid=xgrid,bootstrapSample = 250)
colors<-summaryColors(res.myData)
# no.typeII.0[i]<-sum(colors[3,2])  ##proportion of  not brown (gray) pixels in Sizer-0 #NO TIENE SENTIDO EN ERROR TYPE II
no.typeII.2<-sum(colors[9:10,2]) ##proportion of not green (gray) pixels in Sizer-2
res<-c(i,no.typeII.2)
if (i==1){write(c('i','test.power'),file=fil.res,append=F,ncol=length(res))}
write(res,file=fil.res,append=T,ncol=length(res))
}
N<-500;M<-1000
model=3
fil.res<-paste('Power_H1_',model,'_N_',N,'.txt',sep="")
###funcion para simular desde un modelo
if (model==1){simula<-function(N)return(rgamma(N,shape=5,scale=1/5))}
if (model==2){simula<-function(N)
{data<-double(N)
for(i in 1:N)
{data[i]<-min(c(rweibull(1,shape=3,scale=2.5),rweibull(1,shape=2,scale=2.5),rweibull(1,shape=.5,scale=2.5)))}
return(data)}
}
if (model==3){simula<-function(N){return(rlnorm(N,meanlog=-0.5,sdlog=1))}}
###1=IFR; 2=BFR;3=UFR
#####################################
for(i in 1:M)
{
ss<-i;set.seed(ss)
myData<-simula(N)
if(N==100){xgrid=51}else{xgrid=401}
res.myData<-test.ttt(myData=myData,xgrid=xgrid,bootstrapSample = 250)
colors<-summaryColors(res.myData)
# no.typeII.0[i]<-sum(colors[3,2])  ##proportion of  not brown (gray) pixels in Sizer-0 #NO TIENE SENTIDO EN ERROR TYPE II
no.typeII.2<-sum(colors[9:10,2]) ##proportion of not green (gray) pixels in Sizer-2
res<-c(i,no.typeII.2)
if (i==1){write(c('i','test.power'),file=fil.res,append=F,ncol=length(res))}
write(res,file=fil.res,append=T,ncol=length(res))
}
ls
ls()
power3<-read.table('Power_H1_3_N_500.txt',h=T)
setwd("C:/Users/Usuario/Dropbox/TTT final/resultados_tablas")
power3<-read.table('Power_H1_3_N_500.txt',h=T)
head(power3)
summary(power3[,2])
quantile(power3[,2],0.95)
power3<-read.table('Power_H1_3_N_100.txt',h=T)
summary(power3[,2])
quantile(power3[,2],0.95)
boxplot(power3[,2])
setwd("C:/Users/Usuario/Dropbox/TTT final/paraGrid")
#rm(list=ls())
source('colors_grid.R')
source("tools.R",    encoding="utf-8")
source('test_ttt.R', encoding="utf-8")
N<-100;M<-1000
model=3
fil.res<-paste('Power_H1_',model,'_N_',N,'.txt',sep="")
fil.res
###funcion para simular desde un modelo
if (model==1){simula<-function(N)return(rgamma(N,shape=5,scale=1/5))}
simula<-function(N)
{data<-double(N)
for(i in 1:N)
{data[i]<-min(c(rweibull(1,shape=3,scale=2.5),rweibull(1,shape=2,scale=2.5),rweibull(1,shape=.5,scale=2.5)))}
return(data)}
if (model==2){simula<-function(N)
{data<-double(N)
for(i in 1:N)
{data[i]<-min(c(rweibull(1,shape=3,scale=2.5),rweibull(1,shape=2,scale=2.5),rweibull(1,shape=.5,scale=2.5)))}
return(data)}
}
if (model==3){simula<-function(N){return(rlnorm(N,meanlog=-0.5,sdlog=1))}}
for(i in 1:M)
{
ss<-i;set.seed(ss)
myData<-simula(N)
if(N==100){xgrid=51}else{xgrid=401}
res.myData<-test.ttt(myData=myData,xgrid=xgrid,bootstrapSample = 250)
colors<-summaryColors(res.myData)
# no.typeII.0[i]<-sum(colors[3,2])  ##proportion of  not brown (gray) pixels in Sizer-0 #NO TIENE SENTIDO EN ERROR TYPE II
no.typeII.2<-sum(colors[9:10,2]) ##proportion of not green (gray) pixels in Sizer-2
res<-c(i,no.typeII.2)
if (i==1){write(c('i','test.power'),file=fil.res,append=F,ncol=length(res))}
write(res,file=fil.res,append=T,ncol=length(res))
}
ls()
K<-1:5
Ns<-c(100,500,1000)
param<-expand.grid(K,Ns)
param

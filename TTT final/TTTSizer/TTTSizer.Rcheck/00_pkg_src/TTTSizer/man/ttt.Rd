% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ttt.R
\name{ttt}
\alias{ttt}
\title{For a given array of data, creates several TTT-SiZer plots
  - Plot with the raw data using density a density plot.
  - Plot with the phi vector.
  - The Theta / Phi_h vector / Family plots for Theta0, Theta1, Theta2
  - All theta plot together in the same image
  - The SiZer 0, SiZer 1, and SiZer 2 plots
  - All SiZer plot together in the same image with the family plot Theta0
  - The SiZer 0, SiZer 1, and SiZer 2 plots with the z quantiles instead of strict categorical pixels
  - The ESS (Effective Sample Space)}
\usage{
ttt(
  myData,
  xgrid = 401,
  ygrid = 11,
  hMin = 0,
  hMax = 1,
  kernel = "gaussian",
  myMethod = "quadratic",
  quantileMethod = "normal",
  alpha = 0.05,
  ESSLimit = 5,
  bootstrapSample = 500,
  savePlots = TRUE,
  saveCSV = TRUE,
  saveLog = FALSE,
  blackAndWhite = FALSE
)
}
\arguments{
\item{myData}{array with the data. Doesn't need to be sorted.}

\item{xgrid}{number of estimation points.

               Default is 401. Beware that this could take some
               time to calculate.}

\item{ygrid}{how many h we are we going to generate.

               Default is 11.}

\item{hMin}{the minimum h you want to try.

               Default is 1/(ygrid-1).

               If you set a minimum bigger than the maximum, or smaller than
               0, the default will be used instead}

\item{hMax}{the maximum h you want to try.

               Default is 1.

               If you set a maximum smaller than the minimum, or bigger than
               1, the default will be used instead}

\item{kernel}{which kernel do you want:

               "epanechnikov"
               "biweight"
               "triweight"}

\item{myMethod}{which type of interpolation do you use:

               "quadratic" (DEFAULT)
               "cubic"}

\item{quantileMethod}{You can choose which quantile method to use when
                      calculating the confident intervals.

                      "normal" (DEFAULT)

                          - Classic Z-score based on a normal distribution.
                            For this method you can specify the alpha
                            parameter. For example, for alpha 0.05, you will
                            get a Z of 1.96

                      "simultaneous"

                         - It uses a Z-score different for each pixel,
                           depending on the h value for that pixel.}

\item{alpha}{Level of significance for the confident intervals.

             Default is 0.05

             See the quantileMethod for more info}

\item{ESSLimit}{Effective Sample Space. (Default = 5)

                How many numbers do you need to have around to be a valid result.}

\item{bootstrapSample}{If you choose to use the variance with the bootstrap
                       method, you can specify the number of sample use for
                       the bootstrap

                Default is 100}

\item{savePlots}{Generate all the plots and save them into the result folder (Default = TRUE)}

\item{saveCSV}{Save all numbers used to generate all the plots into a CSV file (Default = TRUE)}

\item{saveLog}{Save every single calculation into a TXT file. File grow exponential, and is around 20MB for 400 x 10 run. (Default = FALSE)
Use this only for debuggin.}

\item{blackAndWhite}{Save your plots with a black and white theme (Default = FALSE)}
}
\value{
The function itself, return the raw data of all the calculations in a dataframe with this columns:

        This two numbers correspond which each pixel in the SiZer plots. So each row of the dataframe represent the information in each pixels:

        p0 - A value between 0 and 1
        h  - The softener used for the kernel

        The values for the function, first derivative, and second derivative.

        phiZero
        phiOne
        phiTwo

        The variance for that given derivatives

        zeroVariance
        firstVariance
        secondVariance

        The Effective Sample Space value for that pixel.

        ESS - A value between 0 and infinity.

        These are the limits on the left and the right, for the confident interval in each derivative.

        LeftIntervalZero
        LeftIntervalFirst
        LeftIntervalSecond
        RightIntervalZero
        RightIntervalFirst
        RightIntervalSecond

        This are all boolean values and tell you whether the average is
        inside the confident interval, under the lowest limit, or above
        the upper limit. For each of the derivatives.

        ZeroInZero
        ZeroInFirst        (average inside)
        ZeroInSecond

        ZeroSmallerZero
        ZeroSmallerFirst   (average under)
        ZeroSmallerSecond

        ZeroBiggerZero
        ZeroBiggerFirst    (average above)
        ZeroBiggerSecond

        Which color correspond in the SiZer map

        ColorCodeZero
        ColorCodeFirst
        ColorCodeSecond

        In the continuos SiZer maps, this tells you how many sigmas away is
        the derivative which respect the average

        distanceZero
        distanceFirst
        distanceSecond

        The phi vector value that is assigned to that p0 value. This column
        is redundant and it repeat itself each time the same p0 appear in a
        row.

        PhiVector

        Also; several plots will appear into the result folder, if the
        savePlot option was set to TRUE The result folder is named as the
        timestamp of the moment you run the script.
}
\description{
For a given array of data, creates several TTT-SiZer plots
  - Plot with the raw data using density a density plot.
  - Plot with the phi vector.
  - The Theta / Phi_h vector / Family plots for Theta0, Theta1, Theta2
  - All theta plot together in the same image
  - The SiZer 0, SiZer 1, and SiZer 2 plots
  - All SiZer plot together in the same image with the family plot Theta0
  - The SiZer 0, SiZer 1, and SiZer 2 plots with the z quantiles instead of strict categorical pixels
  - The ESS (Effective Sample Space)
}
\examples{

This should take about 40 seconds if you run it with a CPU made from a toaster:

xgrid = 50
ygrid = 11
myData  = getRandomData(50,"gamma", 1/5, 5)

ttt(myData, xgrid, ygrid, kernel = "gaussian", myMethod = "quadratic", variance = "bootstrap",  ESSLimit = 5, saveCSV = TRUE, saveLog = FALSE)

}

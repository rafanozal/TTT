#Para reproducir el ejemplo del capitulo 2 del método gráfico:
x<-c(14.01,15.38,20.94,29.44,31.15,36.72,40.32,48.61,56.42,56.97)
#creamos el objeto wblr a partir de unos datos
ob.wblr<-wblr(time=x)
#ajustamos un modelo lognormal
ajuste<-wblr.fit(ob.wblr,dist='weibull')
ajuste$fit[[1]]$fit_vec ### Eta= escala de W; Beta= forma
ajuste<-wblr.fit(ob.wblr)
xfit(ajuste)
### REpresentación gráfica:
x11();
grafico<-plot.wblr(ajuste, main='Weibull plot', is.plot.legend=F)
## añadimos intervalos de confianza
ic<-wblr.conf(ajuste)
x11()
plot.wblr(ic,main='Puntos de trazado en Mediana y percentiles 5 y 95',
pch=8,col='blue', is.plot.legend=F)
lslr(getPPP(x),dist="weibull", npar=2, reg_method="XonY")
lslr(getPPP(x),dist="weibull", npar=2, reg_method="YonX")
library(readr)
table_indicateurs_open_data_france <- read_csv("C:/Users/User/Dropbox/covid/Rcode/table-indicateurs-open-data-france.csv")
View(table_indicateurs_open_data_france)
View(table_indicateurs_open_data_france)
library(readr)
indicators_france <- read_csv("C:/Users/User/Dropbox/covid/Rcode/table-indicateurs-open-data-france.csv")
View(indicators_france)
x11();plot(indicators_france$date,indicators_france$R)
x11();plot(indicators_france$extrac_date[-(1:75)],indicators_france$R[-(1:75)])
x11();plot(indicators_france$extract_date[-(1:75)],indicators_france$R[-(1:75)])
x11();plot(indicators_france$extract_date[-(1:75)],indicators_france$R[-(1:75)],main='Reproduction number France',xlab='Date',ylab='Rt',type='l',col=2,lwd=2)
abline(h=1,lty=2,lwd=2)
la<-0.0039939
v<-(10/la^2+((168^2*10*exp(-la*168)/(1-exp(-la*168)^2))))^-1
v
sqrt(v)
## Datos de entrada para 1-85 grados
cell85 = c(401, 428, 695, 725, 738)
NC85 = 100
## Crear el objeto de supervivencia
y85 = Surv(c(cell85,
rep(1000, NC85-length(cell85))),
c(rep(1,length(cell85)),
rep(0, NC85-length(cell85))))
library(survival)
## Datos de entrada para 1-85 grados
cell85 = c(401, 428, 695, 725, 738)
NC85 = 100
## Crear el objeto de supervivencia
y85 = Surv(c(cell85,
rep(1000, NC85-length(cell85))),
c(rep(1,length(cell85)),
rep(0, NC85-length(cell85))))
## Generar la curva de supervivencia (Kaplan-Meier).
ys85 = survfit(y85 ~ 1, type="kaplan-meier")
plot(ys85, xlab="Horas", ylab="Probabilidad de supervivencia",
col="red")
1068/4
267/3
curve(dbeta(x,2,2))
help(dbeta)
gamma(4)
gamma(2)
89^(-1/5)
100^(-1/5)
0.39^4
estim<-c(	1.853842,-0.6677691,	-1.781428,	  0.2951951,
1.019605,	-1.218022,	 - 2.305293,	  0.5529759,
2.282357,	-0.4644083,	-1.38368,	 0.3758381,
1.642868,	-0.925134,	 -2.519751,	  0.436622)
estim<-matrix(estim,4,4)
estim
estim<-c(	1.853842,-0.6677691,	-1.781428,	  0.2951951,
1.019605,	-1.218022,	 - 2.305293,	  0.5529759,
2.282357,	-0.4644083,	-1.38368,	 0.3758381,
1.642868,	-0.925134,	 -2.519751,	  0.436622)
estim<-c(	1.853842,-0.6677691,	-1.781428,	  0.2951951,
1.019605,	-1.218022,	 - 2.305293,	  0.5529759,
2.282357,	-0.4644083,	-1.38368,	 0.3758381,
1.642868,	-0.925134,	 -2.519751,	  0.436622)
estim<-c(	1.853842,-0.6677691,	-1.781428,	  0.2951951,
1.019605,	-1.218022,	 - 2.305293,	  0.5529759,
2.282357,	-0.4644083,	-1.38368,	 0.3758381,
1.642868,	-0.925134,	 -2.519751,	  0.436622)
estim<-matrix(estim,4,4,byrow=T)
estim
colMeans(estim)
19^2
9+36+1
16+36
25+4
4+81
64+25
64+81
1+16+25
16+4
4
16
1+36
9+49
25+64
64+81
1+16+25
0.003/0.2;0.2/11;11/747
install.packages("laplacetest")
log10(6.36)
install.packages("cmprsk")
R.sdep<-function(t,lambda)
{
p<-exp(-t*lambda)
return(p^4-4*p^3+4*p^2)
}
R.pdes<-function(t,lambda)
{
p<-exp(-t*lambda)
return(2*p^2-p^4)
}
curve(R.sdep(x),0,10)
curve(R.sdep(x,lambda=0.1),0,10)
curve(R.sdep(x,lambda=0.1),0,10)
curve(R.sdep(x,lambda=0.1),0,100)
curve(R.sdep(x,lambda=0.1),0,50)
curve(R.pdes(x,lambda=0.1),0,50,add=T,col=2)
curve(R.sdep(x,lambda=0.5),0,50)
curve(R.sdep(x,lambda=0.5),0,00)
curve(R.sdep(x,lambda=0.5),0,10)
curve(R.pdes(x,lambda=0.5),0,10,add=T,col=2)
p<-0.6
c<-2*p-p^2
c
3*c^2*(1-c)+c^3
p1<-.8
p2<-.9
p3<-.95
c1<-2*p1-p1^2
c2<-2*p2-p2^2
c3<-2*p3-p3^2
c1
c1;c2;c3
c1*c2+c1*c3+c2*c3-2*c1*c2*c3
c2+c3-2*c2*c3
c1+c3-2*c1*c3
c1+c2-2*c1*c2
I1<-function(p){p^2-p^3}
I4<-function(p){2*p^2-p^3-p^4}
curve(I1)
curve(I4,add=T,col=2)
curve(I4)
curve(I1,add=T,col=2)
I5<-function(p){p^2-p^4}
curve(I4)
curve(I1,add=T,col=2)
curve(I5,add=T,col=5)
1-0.99^.5
log(1-0.99^0.5)/(1-exp(-5))
log(1-0.99^0.5)/log((1-exp(-5)))
784/2
log(1-0.99^0.5)/log((1-exp(-1)))
log(0.01)/log((1-exp(-2)))
R1<-function(p){(1-(1-p)^5)^2}
R2<-function(p){1-(1-p^2)^5}
R1<-function(p){(1-(1-p)^5)^2}
R2<-function(p){1-(1-p^2)^5}
curve(R1)
curve(R2,add=T,col=2)
R1<-function(p){(1-(1-p)^5)^2}
R2<-function(p){1-(1-p^2)^5}
curve(R1)
curve(R2,add=T,col=2)
R1<-function(p){(1-(1-p)^5)^2}
R2<-function(p){1-(1-p^2)^5}
curve(R1)
curve(R2,add=T,col=2)
R1<-function(p){(1-(1-p)^15)^2}
R2<-function(p){1-(1-p^2)^15}
curve(R1)
curve(R2,add=T,col=2)
1-0.03^(1/5)
1-0.02^(3)
log(0.35)/log(0.01)
log(0.35)
log(0.01)
log(0.01)7log(.35)
log(0.01)/log(.35)
fac(8)
t<-50;lambda<-0.01;p<-exp(-t*lambda)
v<-apply(4:8,function(j){(factorial(8)/(factorial(j)*factorial(8-j))*p^j*(1-p)^(8-j))})
v<-sapply(4:8,function(j){(factorial(8)/(factorial(j)*factorial(8-j))*p^j*(1-p)^(8-j))})
v
sum(v)
0.99^.5
log(1-0.99^0.5)/log(1-exp(-1))
log(1-0.99)/log(1-exp(-2))
14.37/79.56
dgamma
??dgamma
(exp(1)-1)/(exp(1)+1)
F<-function(t)return((exp(t)-1)/(exp(t)+1))
F1
F(1)
F(2)
(F(2)-F(1))/F(1)
setwd("C:/Users/User/Dropbox/TTT/TTT/materiales/para_tirar_o_no")
library(AdequacyModel)
sigma<-1;mu<--(sigma)^2/2
t<-rlnorm(100,meanlog=mu,sdlog=sigma)
mean(t)
par(mfrow=c(1,2))
TTT(t)
h.ln<-function(x)
{return(dlnorm(x,meanlog=mu,sdlog=sigma)/(1-plnorm(x,meanlog=mu,sdlog=sigma)))}
qlnorm(0.999,meanlog=mu,sdlog=sigma)
curve(h.ln(x),0,12)
###bathtub
r.bt<-function(n,param)
{
sc<-2.5;a<-param[1];b<-param[2];c<-param[3]
t<-double(n)
for(i in 1:n)
{
t1<-rweibull(1,shape=a,scale=sc)
t2<-rweibull(1,shape=b,scale=sc)
t3<-rweibull(1,shape=c,scale=sc)
t[i]<-min(t1,t2,t3)
}
return(t)
}
param<-c(3,2,0.5)
rbt.0<-function(n){return(r.bt(n,param=param))}
times<-rbt.0(100)
mean(times)
TTT(times)
#1. Modelo Weibull aditivo (3 componentes)
#1.1. Función de azar
hw<-function(t,param){a<-param[1];b<-param[2];c<-param[3]
return(a*t^(a-1)+b*t^(b-1)+c*t^(c-1))}
#1.2. Generador aleatorio
r.w<-function(n,param)
{a<-param[1];b<-param[2];c<-param[3]
t1<-rweibull(n,shape=a,scale=1);t2<-rweibull(n,shape=b,scale=1);
t3<-rweibull(n,shape=c,scale=1)
t<-sapply(1:n,function(i){return(min(t1[i],t2[i],t3[i]))})
return(t)
}
#1.3 Prueba este caso: param<-c(3,2,0.5)
param<-c(3,2,0.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1.5,ylim=c(0,10))
#TTT
rw.0<-function(n){return(r.w(n,param))}
t<-rw.0(100)
mean(t); #alrededor de 0.4
library(AdequacyModel)
TTT(t)
curve(hw.0(x),0,1.5,ylim=c(0,10))
curve(hw.0(x),0,1.5,ylim=c(0,10))
h.logis<-function(x,m,s)
{return((1/s*(1+exp(-(t-m)/s)))}
h.logis<-function(x,m,s)
{return((1/s*(1+exp(-(t-m)/s)))}
h.logis<-function(x,m,s)
{return((1/s*(1+exp(-(t-m)/s))))}
curve(h.logis(x,m=0,s=1),-5,5)
h.l<-function(x)return(h.logis(x,0,1))
curve(h.l(x),-5,5)
h.logis<-function(x)
{s=1;m=0
return((1/s*(1+exp(-(t-m)/s))))
}
curve(h.logis(x),-5,5)
h.l<-sapply(seq(-5,5,length=100),h.logis)
plot(seq(-5,5,length=100),h.l)
h.l
h.logis(1)
h.logis
h.logis<-function(x)
{
m<-0;s<-1
res<-1/(s*(1+exp((m-t)/s)))
return(res)
}
h.logis(2)
t
h.logis<-function(x)
{
m<-0;s<-1
res<-1/(s*(1+exp((m-x)/s)))
return(res)
}
curve(h.logis(x),-5,5)

curve(dnorm(x,15,5),add=T,col=2,lwd=2)
curve(dweibull(x,1.5,10),-5,40,ylab='f(t)',xlab='t',main='Tiempo de fallo',col='grey'
,lwd=2,ylim=c(0,0.085))
abline(v=0,lty=2,lwd=2,col=1)
curve(dnorm(x,15,5),add=T,col=2,lwd=1.5)
#1. Modelo Weibull aditivo (3 componentes)
#1.1. Funci√≥n de azar
hw<-function(t,param){a<-param[1];b<-param[2];c<-param[3]
return(a*t^(a-1)+b*t^(b-1)+c*t^(c-1))}
param<-c(3,2,0.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1.5,ylim=c(0,10))
hw<-function(t,param){a<-param[1];b<-param[2];c<-param[3];d<-param[4]
return(a*t^(a-1)+b*t^(b-1)+c*t^(c-1)+d*t^(d-1)))}
hw<-function(t,param){a<-param[1];b<-param[2];c<-param[3];d<-param[4]
return(a*t^(a-1)+b*t^(b-1)+c*t^(c-1)+d*t^(d-1))}
#1.2. Generador aleatorio
param<-c(3,2,0.5,1)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1.5,ylim=c(0,10))
param<-c(3,2,0.5,1)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1,ylim=c(0,10))
curve(hw.0(x),0,1,ylim=c(0,6))
hw<-function(t,param){a<-param[1];b<-param[2];c<-param[3]
return(a*t^(a-1)+b*t^(b-1)+c*t^(c-1))}
param<-c(3,2,0.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1,ylim=c(0,6))
param<-c(3,3,0.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1,ylim=c(0,6))
param<-c(3,3,0.75)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1,ylim=c(0,6))
param<-c(3,3,1)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1,ylim=c(0,6))
param<-c(3,3,.3)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1,ylim=c(0,6))
param<-c(1,3,.3)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1,ylim=c(0,6))
curve(hw.0(x),0,1,ylim=c(0.00001,10))
curve(hw.0(x),0,1,ylim=c(0.0001,10),xlab='t',ylab='h(t)')
curve(hw.0(x),0,1,ylim=c(0.0001,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(1,5,.3)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1,ylim=c(0.0001,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2,5,.3)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0,1,ylim=c(0.0001,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0,1,ylim=c(0.001,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0,1,ylim=c(0.0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0001,10,ylim=c(0.0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0001,10,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(1,5,.3)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0001,10,ylim=c(0.0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0,1,ylim=c(0.0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0,2,ylim=c(0.0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(1,2,.3)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(1,2,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x))#,0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(3,2,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x))#
param<-c(1,2,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x)
param<-c(1,2,.25)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(1,1.2,.25)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(1.5,1.2,.25)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(1.5,1.5,.25)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(1.5,1.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(1.5,1.5,.85)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2.5,1.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2.5,1,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
#T
curve(hw.0(x),0.001,15,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2.5,3,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,15,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.001,5,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.001,1,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2.1,3,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,1,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2,3,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,1,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2,3,.75)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,1,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2,1.5,.75)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,1,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2,1.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,1,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.001,10,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2,.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,10,xlab='t',ylab='h(t)',col=2,lwd=2)
#1.3 Prueba este caso: param<-c(3,2,0.5)
param<-c(3,.25,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,10,xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(3,.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.001,10,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,10,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,10,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,4,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,2,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1.5,xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1.5,ylim=c(0,8),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1.5,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2,.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.0,1.5,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(2.5,.5,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.0,1.5,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(3,.25,.5)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.0,1.5,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
param<-c(3,.25,.25)
hw.0<-function(t)return(hw(t,param))
curve(hw.0(x),0.0,1.5,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1.2,ylim=c(0,10),xlab='t',ylab='h(t)',col=2,lwd=2)
curve(hw.0(x),0.0,1.2,ylim=c(0.4,10),xlab='t',ylab='h(t)',col=2,lwd=2)
h<-function(t)
{return(1/(1-t))}
curve(h)
h<-function(t)
{return(1/(4-t))}
curve(h(x),2,4)
h<-function(t)
{return((1/(4-t))*(t>2))}
curve(h(x),0,4)
h<-function(t)
{return((1/(10-t))*(t>5))}
curve(h(x),0,10)
curve(h(x),4,6)
curve(h(x),9.999,10)
install.packages("DOvalidation")
library(DOvalidation)
setwd("C:/Users/User/Dropbox/TTT/TTT")
setwd("C:/Users/User/Dropbox/TTT")
x<-read.table('aarset.txt',h=T)
x
x<-read.table('busAntonio.txt',h=T)
x
range(x)
seq(0,400,length=20)
xi<-seq(0,400,length=20)
xi<-x[,1]
xi
n<-length(xi)
Oi<-rep(1,n)
Ei<-n:1
Ei<-Ei*diff(c(0,xi);bCV<-b.CV(grid.b, nb , K = "epa", xi, Oi, Ei, wei = "exposure")
Ei<-Ei*diff(c(0,xi));bCV<-b.CV(grid.b, nb , K = "epa", xi, Oi, Ei, wei = "exposure")
Ei<-Ei*diff(c(0,xi));bCV<-b.CV(grid.b=NA, nb=25 , K = "epa", xi, Oi, Ei, wei = "exposure")
b.CV
M <- length(xi)
delta.M <- xi[2] - xi[1]
amp <- xi[M] - xi[1]
b.min <- amp/(M + 1)
b.max <- amp/2
if (missing(nb))
nb <- 50
grid.b <- seq(b.min, b.max, length = nb)
nb<-50
grid.b <- seq(b.min, b.max, length = nb)
grid.b
nb <- length(grid.b)
cv.score <- function(b) {
alpha.i <- hazard.LL(xi, Oi, Ei, x = xi, b, K, Ktype = "symmetric")$hLL
if (wei == "exposure")
cv1 <- sum((alpha.i^2) * Ei, na.rm = TRUE)
else cv1 <- sum((alpha.i^2) * delta.M, na.rm = TRUE)
O.i <- matrix(Oi, M, M)
i0 <- which(Oi == 0)
Oi0 <- Oi - 1
Oi0[i0] <- 0
diag(O.i) <- Oi0
hi.xi <- sapply(1:M, function(i) {
hazard.LL(xi, O.i[, i], Ei, x = xi[i], b, K, Ktype = "symmetric")$hLL
})
if (wei == "exposure")
cv2 <- sum(hi.xi * Oi, na.rm = TRUE)
else cv2 <- sum(hi.xi * Oi * delta.M/Ei, na.rm = TRUE)
cv <- (cv1 - 2 * cv2)
cv[cv == 0] <- NA
return(cv)
}
cv.values <- sapply(grid.b, cv.score)
K='sextic'
cv.values <- sapply(grid.b, cv.score)
wei='same'
cv.values <- sapply(grid.b, cv.score)
plot(cv.values)
ind.cv <- which.min(cv.values)
if ((ind.cv == 1) | (ind.cv == nb))
warning("The CV score doesn't have a minumum in the grid of bandwidths")
bcv <- grid.b[ind.cv]
cv.res <- list(bcv = bcv, ind.cv = ind.cv, cv.values = cv.values,
grid.b = grid.b)
cv.res
b.CV()
bCV
bcv<-cv.res$bcv
hi<-hazard.LL(xi, Oi, Ei, x, b=bcv, K="epa", Ktype="symmetric" , CI=FALSE)
plot(xi,hi)
xi
str(hi)
hazard.LL
str(hi)
plot(xi,hi$hLL)
xi
hi$hLL
plot(xi,Oi/Ei)
Oi
Ei
library(survival)
diff(xi)
bcv
hi<-hazard.LL(x=xi,Oi=Oi,Ei=Ei,b=bcv,x=xi)$hLL
hi<-hazard.LL(xi=xi,Oi=Oi,Ei=Ei,b=bcv,x=xi)$hLL
plot(xi,hi)
hi<-hazard.LL(xi=xi,Oi=Oi,Ei=Ei,b=15,x=xi)$hLL
plot(xi,hi,type='l')
Si<-survfit(Surv(xi,Oi)~1)
str(Si)
plot(Si)
plot(Si$time,Si$n.event/(Si$n.risk*diff(c(0,Si$time))))
hi<-Si$n.event/(Si$n.risk*diff(c(0,Si$time)))
fit<-lowess(hi~xi)
lines(fit$x,fit$y,col=2,lwd=2)
delta
rm(list=ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(lubridate)
library(latex2exp)
library(ggpubr)
source("toolsV9.R",    encoding="utf-8")
source("otroVar.r",    encoding="utf-8")
setwd("C:/Users/User/Dropbox/TTT/TTT_Old")
rm(list=ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(lubridate)
library(latex2exp)
library(ggpubr)
source("toolsV9.R",    encoding="utf-8")
source("otroVar.r",    encoding="utf-8")
source('tttV9_otro.r', encoding="utf-8")
summaryColors <- function(sizerData){
# Find the total of pixel for that map
# totalPs = unique(sizerData$p0)
# totalHs = unique(sizerData$h)
totalPixels = nrow(sizerData)
# Create the dataframe for each color and each percentage.
# There are 4 colors in each of the three maps
colorsZero   = c("yellow", "olivedrab", "camel",  "grey")
colorsFirst  = c("red",    "blue",      "purple", "grey")
colorsSecond = c("orange", "cyan",      "green",  "grey")
totalColors  = c(colorsZero, colorsFirst, colorsSecond)
mySummary = expand.grid(color = totalColors, percentage = 0)
# Calculate the percentage of each color
# -- Zero SiZer
totalPixelsZero<-totalPixels-sum(sizerData$ColorCodeZero == "grey")
percentageGreen  = sum(sizerData$ColorCodeZero == "yellow")/totalPixelsZero
percentageLemon  = sum(sizerData$ColorCodeZero == "olivedrab")/totalPixelsZero
percentageBrown  = sum(sizerData$ColorCodeZero == "camel")/totalPixelsZero
# percentageGrey0  = sum(sizerData$ColorCodeZero == "grey")/totalPixels
# -- First SiZer
totalPixelsFirst<-totalPixels-sum(sizerData$ColorCodeFirst == "grey")
percentageRed    = sum(sizerData$ColorCodeFirst == "red")/totalPixelsFirst
percentageBlue   = sum(sizerData$ColorCodeFirst == "blue")/totalPixelsFirst
percentagePurple = sum(sizerData$ColorCodeFirst == "purple")/totalPixelsFirst
#  percentageGrey1  = sum(sizerData$ColorCodeFirst == "grey")/totalPixels
# -- Second SiZer
totalPixelsSecond<-totalPixels-sum(sizerData$ColorCodeSecond == "grey")
percentageOrange = sum(sizerData$ColorCodeSecond == "orange")/totalPixelsSecond
percentageCyan   = sum(sizerData$ColorCodeSecond == "cyan")/totalPixelsSecond
percentageVerde  = sum(sizerData$ColorCodeSecond == "green")/totalPixelsSecond
# percentageGrey2  = sum(sizerData$ColorCodeSecond == "grey")/totalPixels
# Write it into the dataframe and return it
mySummary[1,2]  = percentageGreen
mySummary[2,2]  = percentageLemon
mySummary[3,2]  = percentageBrown
mySummary[4,2]  = NA #percentageGrey0
mySummary[5,2]  = percentageRed
mySummary[6,2]  = percentageBlue
mySummary[7,2]  = percentagePurple
mySummary[8,2]  = NA #percentageGrey1
mySummary[9,2]  = percentageOrange
mySummary[10,2] = percentageCyan
mySummary[11,2] = percentageVerde
mySummary[12,2] = NA #percentageGrey2
return(mySummary)
}
pvalue.H0exp<-function(myData,M)
{
N<-length(myData)
if(N>100){xgrid=401}else{xgrid=N}
res.myData<-ttt(myData=myData,xgrid=xgrid,saveCSV=FALSE)
colors<-summaryColors(res.myData)
cyan.myData<-(colors[10,2]) ####how many pixels are not green
orange.myData<-(colors[9,2])
#  M<-1000 #number of bootstrap samples
statist.boot<-matrix(NA,1,2)
i<-1
while(i<M)
{H0.dat<-rexp(N);xgrid=xgrid;H0Sizer<-ttt(myData=H0.dat,xgrid=xgrid,saveCSV=FALSE)
H0colors<-summaryColors(H0Sizer)
statist.boot<-rbind(statist.boot,c(H0colors[9:10,2]))
i<-i+1
}
statist.boot<-statist.boot[-1,]
colnames(statist.boot)<-c('orange','cyan')
#pvalue.twosided<-sum(statist.boot>statist.myData)/M
pvalue.orange<-sum(statist.boot[,1]>orange.myData)/M
pvalue.cyan<-sum(statist.boot[,2]>cyan.myData)/M
return(list(orange=pvalue.orange,cyan=pvalue.cyan,
statist.boot=statist.boot,statist.myData=c(orange.myData,cyan.myData)))
}
typeI.error<-function(H0='Exp',N,M=1000)
{
#N= 100, 500, 1000
typeI.0<-double(M);typeI.2<-double(M)
for(i in 1:M)
{
myData<-rexp(N)
if(N==100){xgrid=51}else{xgrid=401}
res.myData<-ttt(myData=myData,xgrid=xgrid,saveCSV=FALSE)
colors<-summaryColors(res.myData)
typeI.0[i]<-sum(colors[1:2,2])  ##number of pixels not brown (gray) in Sizer-0
typeI.2[i]<-sum(colors[9:10,2]) ##number of pixels not green (gray) in Sizer-2
}
return(list(typeI.0,typeI.2))
}
typeII.error<-function(H1=model,N,M=1000)
{
#N= 100, 500, 1000
typeII.2<-double(M)
if (model=='IFR'){simula<-function(N)return(rgamma(N,shape=5,scale=1/5))}
if (model=='BFR'){simula<-function(N)
{data<-double(N)
for(i in 1:N)
{data[i]<-min(c(rweibull(1,shape=3,scale=2.5),rweibull(1,shape=2,scale=2.5),rweibull(1,shape=.5,scale=2.5)))}
return(data)
}}
if (model=='UFR'){simula<-function(N){return(rlnorm(N,meanlog=-0.4,sdlog=1))}}
for(i in 1:M)
{
myData<-simula(N)
if(N==100){xgrid=51}else{xgrid=401}
res.myData<-ttt(myData=myData,xgrid=xgrid,saveCSV=FALSE)
colors<-summaryColors(res.myData)
# typeII.0[i]<-sum(colors[3,2])  ##number of pixels brown (gray) in Sizer-0 #NO TIENE SENTIDO EN ERROR TYPE II
typeII.2[i]<-sum(colors[11,2]) ##number of pixels green (gray) in Sizer-2
}
return(list(typeII.2))
}
error
error.I<-typeI.error(N=100)
if(N==100){xgrid=51}else{xgrid=401}
N<-100
if(N==100){xgrid=51}else{xgrid=401}
xgrid
error.I<-typeI.error(N=100)
str(error.I)
boxplot(error.I)
summary(error.I)
summary(error.I[[1]])
summary(error.I[[2]])
write.table(error.I,'errorI_N100M1000.txt')
# For a given raw data from a SiZer maps, tells you the percentage for each color in each SiZer map
rm(list=ls())
# Add the needed libraries
library(ggplot2)
library(reshape2)
library(dplyr)
library(lubridate)
library(latex2exp)
library(ggpubr)
source("toolsV9.R",    encoding="utf-8")
source("otroVar.r",    encoding="utf-8")
source('tttV9_otro.r', encoding="utf-8")
summaryColors <- function(sizerData){
# Find the total of pixel for that map
# totalPs = unique(sizerData$p0)
# totalHs = unique(sizerData$h)
totalPixels = nrow(sizerData)
# Create the dataframe for each color and each percentage.
# There are 4 colors in each of the three maps
colorsZero   = c("yellow", "olivedrab", "camel",  "grey")
colorsFirst  = c("red",    "blue",      "purple", "grey")
colorsSecond = c("orange", "cyan",      "green",  "grey")
totalColors  = c(colorsZero, colorsFirst, colorsSecond)
mySummary = expand.grid(color = totalColors, percentage = 0)
# Calculate the percentage of each color
# -- Zero SiZer
totalPixelsZero<-totalPixels-sum(sizerData$ColorCodeZero == "grey")
percentageGreen  = sum(sizerData$ColorCodeZero == "yellow")/totalPixelsZero
percentageLemon  = sum(sizerData$ColorCodeZero == "olivedrab")/totalPixelsZero
percentageBrown  = sum(sizerData$ColorCodeZero == "camel")/totalPixelsZero
# percentageGrey0  = sum(sizerData$ColorCodeZero == "grey")/totalPixels
# -- First SiZer
totalPixelsFirst<-totalPixels-sum(sizerData$ColorCodeFirst == "grey")
percentageRed    = sum(sizerData$ColorCodeFirst == "red")/totalPixelsFirst
percentageBlue   = sum(sizerData$ColorCodeFirst == "blue")/totalPixelsFirst
percentagePurple = sum(sizerData$ColorCodeFirst == "purple")/totalPixelsFirst
#  percentageGrey1  = sum(sizerData$ColorCodeFirst == "grey")/totalPixels
# -- Second SiZer
totalPixelsSecond<-totalPixels-sum(sizerData$ColorCodeSecond == "grey")
percentageOrange = sum(sizerData$ColorCodeSecond == "orange")/totalPixelsSecond
percentageCyan   = sum(sizerData$ColorCodeSecond == "cyan")/totalPixelsSecond
percentageVerde  = sum(sizerData$ColorCodeSecond == "green")/totalPixelsSecond
# percentageGrey2  = sum(sizerData$ColorCodeSecond == "grey")/totalPixels
# Write it into the dataframe and return it
mySummary[1,2]  = percentageGreen
mySummary[2,2]  = percentageLemon
mySummary[3,2]  = percentageBrown
mySummary[4,2]  = NA #percentageGrey0
mySummary[5,2]  = percentageRed
mySummary[6,2]  = percentageBlue
mySummary[7,2]  = percentagePurple
mySummary[8,2]  = NA #percentageGrey1
mySummary[9,2]  = percentageOrange
mySummary[10,2] = percentageCyan
mySummary[11,2] = percentageVerde
mySummary[12,2] = NA #percentageGrey2
return(mySummary)
}
pvalue.H0exp<-function(myData,M)
{
N<-length(myData)
if(N>100){xgrid=401}else{xgrid=N}
res.myData<-ttt(myData=myData,xgrid=xgrid,saveCSV=FALSE)
colors<-summaryColors(res.myData)
cyan.myData<-(colors[10,2]) ####how many pixels are not green
orange.myData<-(colors[9,2])
#  M<-1000 #number of bootstrap samples
statist.boot<-matrix(NA,1,2)
i<-1
while(i<M)
{H0.dat<-rexp(N);xgrid=xgrid;H0Sizer<-ttt(myData=H0.dat,xgrid=xgrid,saveCSV=FALSE)
H0colors<-summaryColors(H0Sizer)
statist.boot<-rbind(statist.boot,c(H0colors[9:10,2]))
i<-i+1
}
statist.boot<-statist.boot[-1,]
colnames(statist.boot)<-c('orange','cyan')
#pvalue.twosided<-sum(statist.boot>statist.myData)/M
pvalue.orange<-sum(statist.boot[,1]>orange.myData)/M
pvalue.cyan<-sum(statist.boot[,2]>cyan.myData)/M
return(list(orange=pvalue.orange,cyan=pvalue.cyan,
statist.boot=statist.boot,statist.myData=c(orange.myData,cyan.myData)))
}
typeI.error<-function(H0='Exp',N,M=1000)
{
#N= 100, 500, 1000
typeI.0<-double(M);typeI.2<-double(M)
for(i in 1:M)
{
myData<-rexp(N)
if(N==100){xgrid=51}else{xgrid=401}
res.myData<-ttt(myData=myData,xgrid=xgrid,saveCSV=FALSE)
colors<-summaryColors(res.myData)
typeI.0[i]<-sum(colors[1:2,2])  ##number of pixels not brown (gray) in Sizer-0
typeI.2[i]<-sum(colors[9:10,2]) ##number of pixels not green (gray) in Sizer-2
}
return(list(typeI.0,typeI.2))
}
errores500<-typeI.error(N=500)
N
N<-500
xgrid<-401
errores500<-typeI.error(N=500)
